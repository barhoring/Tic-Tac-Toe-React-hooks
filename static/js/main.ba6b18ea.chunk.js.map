{"version":3,"sources":["Cell.js","Board.js","Menu.js","App.js","serviceWorker.js","index.js"],"names":["Cell","handleClick","content","className","onClick","Board","board","isGameOver","style","flexDirection","alignItems","map","row","index","col","key","Menu","turn","newGame","winner","padding","defaultBoard","App","useState","setTurn","setIsGameOver","setBoard","setWinner","moves","setMoves","useEffect","checkGameEnd","newBoard","x","y","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ba6b18ea.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Cell = ({ handleClick, content }) => {\n  return (\n    <div className=\"Cell flex-center\" onClick={handleClick}>\n      {content}\n    </div>\n  );\n};\n\nexport default Cell;\n","import React from \"react\";\nimport \"./App.css\";\nimport Cell from \"./Cell\";\n\nconst Board = ({ handleClick, board, isGameOver }) => {\n  return isGameOver ? (\n    <>\n      <div className=\"Board border center\">\n        <div style={{ flexDirection: \"column\", alignItems: \"center \" }}>\n          <h1>Game Over</h1>\n        </div>\n      </div>\n    </>\n  ) : (\n    <div className=\"center border grey\">\n      <div className=\"Board\">\n        {[0, 1, 2].map((row, index) => {\n          return [0, 1, 2].map((col, index) => {\n            return (\n              <Cell\n                key={`${row}${col}`}\n                handleClick={() => handleClick(row, col)}\n                content={board[row][col]}\n              />\n            );\n          });\n        })}\n      </div>\n    </div>\n  );\n};\nexport default Board;\n","import React from \"react\";\n\nconst Menu = ({ turn, newGame, winner, isGameOver }) => {\n  return (\n    <div className=\"Menu border\">\n      <div style={{ padding: \"20px\" }}>\n        {!isGameOver && <h1 className=\"turn\">{turn}'s turn</h1>}\n        <button className=\"button\" onClick={() => newGame()}>\n          New Game\n        </button>\n        {winner ? <h2>{winner} wins!</h2> : \"\"}\n        {!winner && isGameOver && <h2>TIE</h2>}\n      </div>\n    </div>\n  );\n};\n\nexport default Menu;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Board from \"./Board\";\nimport Menu from \"./Menu\";\n\n// When MAX_MOVES reached and there is no winner - announce a tie\nconst MAX_MOVES = 9;\n\n// Alternative array could be 1 dimentional with length 9\n// and in this way avoid the deep clone of board\nconst defaultBoard = [\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n];\n\nfunction App() {\n  // X player starts\n  const [turn, setTurn] = useState(\"X\");\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [board, setBoard] = useState([...defaultBoard]);\n  // Game always end after 9 moves\n  // // Game always end after 9 moves\n  const [winner, setWinner] = useState(null);\n  const [moves, setMoves] = useState(0);\n\n  // Run every time the board changes to check for End Of Game.\n  useEffect(() => {\n    if (checkGameEnd()) {\n      setIsGameOver(true);\n      const winner = turn === \"X\" ? \"O\" : \"X\";\n      setWinner(winner);\n    } else if (moves === MAX_MOVES) setIsGameOver(true);\n  }, [board]); // this dependency array will suffice\n\n  const newGame = () => {\n    // create a copy to force render\n    const newBoard = [...defaultBoard];\n    setBoard(newBoard);\n    setIsGameOver(false);\n    setWinner(null);\n    setTurn(\"X\");\n    setMoves(0);\n  };\n\n  // There are 8 different ways to win.\n  // Check all of them\n  const checkGameEnd = () => {\n    if (\n      (board[0][0] &&\n        board[0][0] === board[0][1] &&\n        board[0][1] === board[0][2]) ||\n      (board[1][0] &&\n        board[1][0] === board[1][1] &&\n        board[1][1] === board[1][2]) ||\n      (board[2][0] &&\n        board[2][0] === board[2][1] &&\n        board[2][1] === board[2][2]) ||\n      (board[0][0] &&\n        board[0][0] === board[1][0] &&\n        board[1][0] === board[2][0]) ||\n      (board[0][1] &&\n        board[0][1] === board[1][1] &&\n        board[1][1] === board[2][1]) ||\n      (board[0][2] &&\n        board[0][2] === board[1][2] &&\n        board[1][2] === board[2][2]) ||\n      (board[0][0] &&\n        board[0][0] === board[1][1] &&\n        board[1][1] === board[2][2]) ||\n      (board[0][2] &&\n        board[0][2] === board[1][1] &&\n        board[1][1] === board[2][0])\n    )\n      return true;\n  };\n\n  const handleClick = (x, y) => {\n    // Create a copy to force render\n    if (board[x][y] !== \"\") return;\n    // const newBoard = deepClone(board);\n    const newBoard = [...board];\n    newBoard[x] = [...newBoard[x]];\n    newBoard[x][y] = turn;\n    setBoard(newBoard);\n    turn === \"X\" ? setTurn(\"O\") : setTurn(\"X\");\n    setMoves(moves + 1);\n  };\n\n  return (\n    <div className=\"App\">\n      <Menu\n        turn={turn}\n        newGame={newGame}\n        winner={winner}\n        isGameOver={isGameOver}\n      />\n      <Board\n        turn={turn}\n        handleClick={handleClick}\n        board={board}\n        isGameOver={isGameOver}\n        newGame={newGame}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}